{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "o2Lf6OxJ3RCJ",
        "9_SzuaHxDCsZ",
        "Wh4MBmczqwCT",
        "8BYgy32x3Y_L"
      ],
      "mount_file_id": "1rp3sdBT0XOseOH7IIr3j9ER6hpqOWcl7",
      "authorship_tag": "ABX9TyMsS4GSm5YP++Go3qr+mLA3",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/yongjuncho123/dust/blob/main/Dust_Job01_Data\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "HkHpdCmS31Eu"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import datetime\n",
        "from datetime import *\n",
        "import os"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Gu = ['강남구', '강동구', '광진구', '송파구', '성동구', '용산구', '마포구', '서초구', '동작구', '영등포구', '강서구']\n",
        "name_abb = ['GN', 'GD', 'GJ', 'SP', 'SD', 'YS', 'MP', 'SCH', 'DJ', 'YDP', 'GS']"
      ],
      "metadata": {
        "id": "dcGRbmYA39uO"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 분기별 연도별 11개구 구분"
      ],
      "metadata": {
        "id": "o2Lf6OxJ3RCJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 분기별로 나눠져 있으면 이걸로\n",
        "unpre_dust = pd.read_csv('DATA\\에어코리아 최종측정 대기질 데이터/2016/2016년 4분기.csv', encoding='cp949')\n",
        "## csv 파일 저장시 clean01 / 2016_()분기/2016_()_{} 로 이름 바꾸기\n",
        "for i in range(len(Gu)):\n",
        "    Gu_name = Gu[i]\n",
        "    Gu_abb = name_abb[i]\n",
        "    print(Gu_name, Gu_abb)\n",
        "    unpre_Gu = unpre_dust[unpre_dust['측정소명'].str.contains(Gu_name)]\n",
        "    unpre_Gu.to_csv('./DATA/clean01/2016_4분기/2016_4분기_{}.csv'.format(Gu_abb), index=False)\n",
        "    print(unpre_Gu)"
      ],
      "metadata": {
        "id": "kL-0Zqon39zx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 월별로 나눠져 있으면 이걸로\n",
        "unpre_dust = pd.read_excel('./DATA/에어코리아 최종측정 대기질 데이터/2020/2020년 1월.xlsx')\n",
        "\n",
        "for i in range(len(Gu)):\n",
        "    Gu_name = Gu[i]\n",
        "    Gu_abb = name_abb[i]\n",
        "    print(Gu_name, Gu_abb)\n",
        "    unpre_Gu = unpre_dust[unpre_dust['측정소명'].str.contains(Gu_name)]\n",
        "    unpre_Gu.to_csv('./DATA/clean01/2020_4분기/2020_4분기_12월/2020_12월_{}.csv'.format(Gu_abb), index=False)\n",
        "    print(unpre_Gu)"
      ],
      "metadata": {
        "id": "57gzLQDg394-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# # 연도별로 concat(axis = 0 => 행기준, 동일 column을 기준으로 위아래로 합쳐짐 / axis = 1 => 열기준, 옆으로 붙여짐)\n",
        "\n",
        "# df1 = pd.read_csv('./DATA/clean01/2018_1분기/2018_1분기_YS.csv')\n",
        "# df2 = pd.read_csv('./DATA/clean01/2018_2분기/2018_2분기_YS.csv')\n",
        "# df3 = pd.read_csv('./DATA/clean01/2018_3분기/2018_3분기_YS.csv')\n",
        "# df4 = pd.read_csv('./DATA/clean01/2018_4분기/2018_4분기_YS.csv')\n",
        "\n",
        "\n",
        "# total_YS_2018 = pd.concat([df1, df2, df3, df4], axis = 0)\n",
        "# print(total_YS_2018)\n",
        "\n",
        "# total_YS_2018.to_csv('./DATA/Concat_By_Year/2018/2018년_용산구.csv', index= False)\n"
      ],
      "metadata": {
        "id": "f1qvatwo4PnB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# ## 월별로 있는 CONCAT\n",
        "\n",
        "# df1 = pd.read_csv('./DATA/clean01/2020_1분기/2020_1분기_1월/2020_1월_YS.csv')\n",
        "# df2 = pd.read_csv('./DATA/clean01/2020_1분기/2020_1분기_2월/2020_2월_YS.csv')\n",
        "# df3 = pd.read_csv('./DATA/clean01/2020_1분기/2020_1분기_3월/2020_3월_YS.csv')\n",
        "# df4 = pd.read_csv('./DATA/clean01/2020_2분기/2020_2분기_4월/2020_4월_YS.csv')\n",
        "# df5 = pd.read_csv('./DATA/clean01/2020_2분기/2020_2분기_5월/2020_5월_YS.csv')\n",
        "# df6 = pd.read_csv('./DATA/clean01/2020_2분기/2020_2분기_6월/2020_6월_YS.csv')\n",
        "# df7 = pd.read_csv('./DATA/clean01/2020_3분기/2020_3분기_7월/2020_7월_YS.csv')\n",
        "# df8 = pd.read_csv('./DATA/clean01/2020_3분기/2020_3분기_8월/2020_8월_YS.csv')\n",
        "# df9 = pd.read_csv('./DATA/clean01/2020_3분기/2020_3분기_9월/2020_9월_YS.csv')\n",
        "# df10 = pd.read_csv('./DATA/clean01/2020_4분기/2020_4분기_10월/2020_10월_YS.csv')\n",
        "# df11 = pd.read_csv('./DATA/clean01/2020_4분기/2020_4분기_11월/2020_11월_YS.csv')\n",
        "# df12 = pd.read_csv('./DATA/clean01/2020_4분기/2020_4분기_12월/2020_12월_YS.csv')\n",
        "\n",
        "# total_YS_2020 = pd.concat([df1, df2, df3, df4, df5, df6, df7, df8, df9, df10, df11, df12], axis = 0)\n",
        "# print(total_YS_2020)"
      ],
      "metadata": {
        "id": "COJq17474Ppj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 3시간 평균"
      ],
      "metadata": {
        "id": "9_SzuaHxDCsZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('/content/drive/MyDrive/data/project02_dust/서울시_열린데이터광장/연도별_구별구분/2016/2016_DJ_data.csv')\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "_CWn-Koos-1d",
        "outputId": "cf4bb638-8c50-438c-84e6-de75839a76cb"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                       일시   구분  미세먼지(PM10)  초미세먼지(PM25)\n",
              "0     2016-12-31 23:00:00  동작구        67.0         55.0\n",
              "1     2016-12-31 22:00:00  동작구        62.0         50.0\n",
              "2     2016-12-31 21:00:00  동작구        56.0         44.0\n",
              "3     2016-12-31 20:00:00  동작구        59.0         46.0\n",
              "4     2016-12-31 19:00:00  동작구        56.0         45.0\n",
              "...                   ...  ...         ...          ...\n",
              "8776  2016-01-01 04:00:00  동작구        51.0         43.0\n",
              "8777  2016-01-01 03:00:00  동작구        46.0         36.0\n",
              "8778  2016-01-01 02:00:00  동작구        67.0         45.0\n",
              "8779  2016-01-01 01:00:00  동작구        77.0         50.0\n",
              "8780  2016-01-01 00:00:00  동작구        90.0         58.0\n",
              "\n",
              "[8781 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-18e251a6-3be0-47a5-8ac4-6457fcad0fae\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>일시</th>\n",
              "      <th>구분</th>\n",
              "      <th>미세먼지(PM10)</th>\n",
              "      <th>초미세먼지(PM25)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2016-12-31 23:00:00</td>\n",
              "      <td>동작구</td>\n",
              "      <td>67.0</td>\n",
              "      <td>55.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2016-12-31 22:00:00</td>\n",
              "      <td>동작구</td>\n",
              "      <td>62.0</td>\n",
              "      <td>50.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2016-12-31 21:00:00</td>\n",
              "      <td>동작구</td>\n",
              "      <td>56.0</td>\n",
              "      <td>44.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2016-12-31 20:00:00</td>\n",
              "      <td>동작구</td>\n",
              "      <td>59.0</td>\n",
              "      <td>46.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2016-12-31 19:00:00</td>\n",
              "      <td>동작구</td>\n",
              "      <td>56.0</td>\n",
              "      <td>45.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8776</th>\n",
              "      <td>2016-01-01 04:00:00</td>\n",
              "      <td>동작구</td>\n",
              "      <td>51.0</td>\n",
              "      <td>43.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8777</th>\n",
              "      <td>2016-01-01 03:00:00</td>\n",
              "      <td>동작구</td>\n",
              "      <td>46.0</td>\n",
              "      <td>36.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8778</th>\n",
              "      <td>2016-01-01 02:00:00</td>\n",
              "      <td>동작구</td>\n",
              "      <td>67.0</td>\n",
              "      <td>45.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8779</th>\n",
              "      <td>2016-01-01 01:00:00</td>\n",
              "      <td>동작구</td>\n",
              "      <td>77.0</td>\n",
              "      <td>50.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8780</th>\n",
              "      <td>2016-01-01 00:00:00</td>\n",
              "      <td>동작구</td>\n",
              "      <td>90.0</td>\n",
              "      <td>58.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8781 rows × 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-18e251a6-3be0-47a5-8ac4-6457fcad0fae')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-18e251a6-3be0-47a5-8ac4-6457fcad0fae button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-18e251a6-3be0-47a5-8ac4-6457fcad0fae');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f7478a51-f26b-4366-a17c-d8b4dea7c236\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f7478a51-f26b-4366-a17c-d8b4dea7c236')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f7478a51-f26b-4366-a17c-d8b4dea7c236 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_46c285ff-4799-4066-91aa-af7f1f0c7d46\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_46c285ff-4799-4066-91aa-af7f1f0c7d46 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8781,\n  \"fields\": [\n    {\n      \"column\": \"\\uc77c\\uc2dc\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 8781,\n        \"samples\": [\n          \"2016-09-10 14:00:00\",\n          \"2016-07-21 02:00:00\",\n          \"2016-03-02 01:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\uad6c\\ubd84\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"\\ub3d9\\uc791\\uad6c\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\ubbf8\\uc138\\uba3c\\uc9c0(PM10)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26.094133140529728,\n        \"min\": 1.0,\n        \"max\": 305.0,\n        \"num_unique_values\": 182,\n        \"samples\": [\n          30.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\ucd08\\ubbf8\\uc138\\uba3c\\uc9c0(PM25)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16.241871354372364,\n        \"min\": 1.0,\n        \"max\": 114.0,\n        \"num_unique_values\": 106,\n        \"samples\": [\n          114.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## 데이터 전처리(3시간 이동평균)\n",
        "for i in range(len(Gu)):\n",
        "    unpre_Gu = pd.read_csv('/content/drive/MyDrive/data/project02_dust/서울시_열린데이터광장/연도별_구별구분/2019/2019_{}_data.csv'.format(name_abb[i]))\n",
        "    print(Gu[i])\n",
        "\n",
        "    while unpre_Gu['미세먼지(PM10)'].isna().sum() and unpre_Gu['초미세먼지(PM25)'].isna().sum() != 0:\n",
        "        unpre_Gu[['미세먼지(PM10)', '초미세먼지(PM25)']] = unpre_Gu[['미세먼지(PM10)', '초미세먼지(PM25)']].fillna(unpre_Gu[['미세먼지(PM10)', '초미세먼지(PM25)']].rolling(window = 3, min_periods=1).mean())\n",
        "        if unpre_Gu['미세먼지(PM10)'].isna().sum() and unpre_Gu['초미세먼지(PM25)'].isna().sum() != 0:\n",
        "            unpre_Gu[['미세먼지(PM10)', '초미세먼지(PM25)']] = unpre_Gu[['미세먼지(PM10)', '초미세먼지(PM25)']].fillna(0)\n",
        "\n",
        "    unpre_Gu.to_csv('/content/drive/MyDrive/data/project02_dust/서울시_열린데이터광장/3h_mean_done/2019/2019_{}_3h'.format(name_abb[i]), index=False)"
      ],
      "metadata": {
        "id": "SS0MP4j54Wn_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "52f319cd-d5c3-4e7b-d3ee-6450851986f5"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "강남구\n",
            "강동구\n",
            "광진구\n",
            "송파구\n",
            "성동구\n",
            "용산구\n",
            "마포구\n",
            "서초구\n",
            "동작구\n",
            "영등포구\n",
            "강서구\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(len(Gu)):\n",
        "    d = pd.read_csv('/content/drive/MyDrive/data/project02_dust/서울시_열린데이터광장/3h_mean_done/2019/2019_{}_3h'.format(name_abb[i]))\n",
        "    print(Gu[i],\"는\")\n",
        "    print(d.isna().sum())\n",
        "    print(d[d['미세먼지(PM10)'] == 0])\n",
        "    print('ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K0ar1lqrsBYe",
        "outputId": "d79a70c6-a762-4553-9dd7-405d843f8c2b"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "강남구 는\n",
            "일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "dtype: int64\n",
            "                       일시   구분  미세먼지(PM10)  초미세먼지(PM25)\n",
            "993   2019-11-20 14:00:00  강남구         0.0          0.0\n",
            "1854  2019-10-15 17:00:00  강남구         0.0          0.0\n",
            "1855  2019-10-15 16:00:00  강남구         0.0          0.0\n",
            "2655  2019-09-12 08:00:00  강남구         0.0          0.0\n",
            "2656  2019-09-12 07:00:00  강남구         0.0          0.0\n",
            "...                   ...  ...         ...          ...\n",
            "7568  2019-02-19 15:00:00  강남구         0.0         56.0\n",
            "7662  2019-02-15 17:00:00  강남구         0.0         33.0\n",
            "7663  2019-02-15 16:00:00  강남구         0.0         33.0\n",
            "8697  2019-01-03 14:00:00  강남구         0.0         23.0\n",
            "8698  2019-01-03 13:00:00  강남구         0.0         16.0\n",
            "\n",
            "[290 rows x 4 columns]\n",
            "ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n",
            "강동구 는\n",
            "일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "dtype: int64\n",
            "                       일시   구분  미세먼지(PM10)  초미세먼지(PM25)\n",
            "281   2019-12-20 06:00:00  강동구         0.0          0.0\n",
            "282   2019-12-20 05:00:00  강동구         0.0          0.0\n",
            "283   2019-12-20 04:00:00  강동구         0.0          0.0\n",
            "284   2019-12-20 03:00:00  강동구         0.0          0.0\n",
            "285   2019-12-20 02:00:00  강동구         0.0          0.0\n",
            "...                   ...  ...         ...          ...\n",
            "3658  2019-08-01 13:00:00  강동구         0.0          0.0\n",
            "4211  2019-07-09 12:00:00  강동구         0.0         11.0\n",
            "4641  2019-06-21 14:00:00  강동구         0.0          0.0\n",
            "5242  2019-05-27 13:00:00  강동구         0.0          9.0\n",
            "6848  2019-03-21 15:00:00  강동구         0.0         33.0\n",
            "\n",
            "[159 rows x 4 columns]\n",
            "ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n",
            "광진구 는\n",
            "일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "dtype: int64\n",
            "                       일시   구분  미세먼지(PM10)  초미세먼지(PM25)\n",
            "722   2019-12-01 21:00:00  광진구         0.0         29.0\n",
            "1113  2019-11-15 14:00:00  광진구         0.0          0.0\n",
            "1385  2019-11-04 06:00:00  광진구         0.0          8.0\n",
            "1393  2019-11-03 22:00:00  광진구         0.0         10.0\n",
            "1394  2019-11-03 21:00:00  광진구         0.0          8.0\n",
            "...                   ...  ...         ...          ...\n",
            "7950  2019-02-03 17:00:00  광진구         0.0         23.0\n",
            "7954  2019-02-03 13:00:00  광진구         0.0         20.0\n",
            "7958  2019-02-03 09:00:00  광진구         0.0         26.0\n",
            "7959  2019-02-03 08:00:00  광진구         0.0         27.0\n",
            "7960  2019-02-03 07:00:00  광진구         0.0         35.0\n",
            "\n",
            "[186 rows x 4 columns]\n",
            "ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n",
            "송파구 는\n",
            "일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "dtype: int64\n",
            "                       일시   구분  미세먼지(PM10)  초미세먼지(PM25)\n",
            "273   2019-12-20 14:00:00  송파구         0.0          0.0\n",
            "274   2019-12-20 13:00:00  송파구         0.0          0.0\n",
            "275   2019-12-20 12:00:00  송파구         0.0          0.0\n",
            "1021  2019-11-19 10:00:00  송파구         0.0          0.0\n",
            "1022  2019-11-19 09:00:00  송파구         0.0          0.0\n",
            "...                   ...  ...         ...          ...\n",
            "8199  2019-01-24 08:00:00  송파구         0.0         19.0\n",
            "8200  2019-01-24 07:00:00  송파구         0.0         21.0\n",
            "8201  2019-01-24 06:00:00  송파구         0.0         20.0\n",
            "8202  2019-01-24 05:00:00  송파구         0.0         14.0\n",
            "8203  2019-01-24 04:00:00  송파구         0.0         17.0\n",
            "\n",
            "[90 rows x 4 columns]\n",
            "ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n",
            "성동구 는\n",
            "일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "dtype: int64\n",
            "                       일시   구분  미세먼지(PM10)  초미세먼지(PM25)\n",
            "294   2019-12-19 17:00:00  성동구         0.0          0.0\n",
            "295   2019-12-19 16:00:00  성동구         0.0          0.0\n",
            "296   2019-12-19 15:00:00  성동구         0.0          0.0\n",
            "297   2019-12-19 14:00:00  성동구         0.0          0.0\n",
            "892   2019-11-24 19:00:00  성동구         0.0          8.0\n",
            "...                   ...  ...         ...          ...\n",
            "7392  2019-02-26 23:00:00  성동구         0.0         43.0\n",
            "7393  2019-02-26 22:00:00  성동구         0.0         40.0\n",
            "7394  2019-02-26 21:00:00  성동구         0.0         36.0\n",
            "7395  2019-02-26 20:00:00  성동구         0.0         30.0\n",
            "8575  2019-01-08 16:00:00  성동구         0.0         22.0\n",
            "\n",
            "[75 rows x 4 columns]\n",
            "ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n",
            "용산구 는\n",
            "일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "dtype: int64\n",
            "                       일시   구분  미세먼지(PM10)  초미세먼지(PM25)\n",
            "9     2019-12-31 14:00:00  용산구         0.0          0.0\n",
            "10    2019-12-31 13:00:00  용산구         0.0          0.0\n",
            "11    2019-12-31 12:00:00  용산구         0.0         12.0\n",
            "12    2019-12-31 11:00:00  용산구         0.0         20.0\n",
            "13    2019-12-31 10:00:00  용산구         0.0         11.0\n",
            "...                   ...  ...         ...          ...\n",
            "7568  2019-02-19 15:00:00  용산구         0.0         50.0\n",
            "7569  2019-02-19 14:00:00  용산구         0.0         55.0\n",
            "7656  2019-02-15 23:00:00  용산구         0.0         26.0\n",
            "7948  2019-02-03 19:00:00  용산구         0.0         15.0\n",
            "7955  2019-02-03 12:00:00  용산구         0.0         19.0\n",
            "\n",
            "[96 rows x 4 columns]\n",
            "ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n",
            "마포구 는\n",
            "일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "dtype: int64\n",
            "                       일시   구분  미세먼지(PM10)  초미세먼지(PM25)\n",
            "1686  2019-10-22 17:00:00  마포구         0.0          0.0\n",
            "1687  2019-10-22 16:00:00  마포구         0.0          0.0\n",
            "1688  2019-10-22 15:00:00  마포구         0.0          0.0\n",
            "1689  2019-10-22 14:00:00  마포구         0.0          0.0\n",
            "1690  2019-10-22 13:00:00  마포구         0.0          0.0\n",
            "...                   ...  ...         ...          ...\n",
            "4988  2019-06-07 03:00:00  마포구         0.0         23.0\n",
            "5216  2019-05-28 15:00:00  마포구         0.0          6.0\n",
            "5421  2019-05-20 02:00:00  마포구         0.0         19.0\n",
            "5430  2019-05-19 17:00:00  마포구         0.0         22.0\n",
            "6863  2019-03-21 00:00:00  마포구         0.0         51.0\n",
            "\n",
            "[974 rows x 4 columns]\n",
            "ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n",
            "서초구 는\n",
            "일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "dtype: int64\n",
            "                       일시   구분  미세먼지(PM10)  초미세먼지(PM25)\n",
            "608   2019-12-06 15:00:00  서초구         0.0         13.0\n",
            "609   2019-12-06 14:00:00  서초구         0.0         11.0\n",
            "704   2019-12-02 15:00:00  서초구         0.0         10.0\n",
            "2558  2019-09-16 09:00:00  서초구         0.0          0.0\n",
            "2559  2019-09-16 08:00:00  서초구         0.0          0.0\n",
            "...                   ...  ...         ...          ...\n",
            "7156  2019-03-08 19:00:00  서초구         0.0         20.0\n",
            "7157  2019-03-08 18:00:00  서초구         0.0         28.0\n",
            "7158  2019-03-08 17:00:00  서초구         0.0         35.0\n",
            "7159  2019-03-08 16:00:00  서초구         0.0         20.0\n",
            "7564  2019-02-19 19:00:00  서초구         0.0         25.0\n",
            "\n",
            "[127 rows x 4 columns]\n",
            "ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n",
            "동작구 는\n",
            "일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "dtype: int64\n",
            "                       일시   구분  미세먼지(PM10)  초미세먼지(PM25)\n",
            "1081  2019-11-16 22:00:00  동작구         0.0         37.0\n",
            "1082  2019-11-16 21:00:00  동작구         0.0         37.0\n",
            "1083  2019-11-16 20:00:00  동작구         0.0         32.0\n",
            "1084  2019-11-16 19:00:00  동작구         0.0         31.0\n",
            "1104  2019-11-15 23:00:00  동작구         0.0         20.0\n",
            "...                   ...  ...         ...          ...\n",
            "2965  2019-08-30 10:00:00  동작구         0.0          0.0\n",
            "5674  2019-05-09 13:00:00  동작구         0.0          0.0\n",
            "5675  2019-05-09 12:00:00  동작구         0.0          0.0\n",
            "5700  2019-05-08 11:00:00  동작구         0.0          0.0\n",
            "6083  2019-04-22 12:00:00  동작구         0.0          0.0\n",
            "\n",
            "[130 rows x 4 columns]\n",
            "ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n",
            "영등포구 는\n",
            "일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "dtype: int64\n",
            "                       일시    구분  미세먼지(PM10)  초미세먼지(PM25)\n",
            "2035  2019-10-08 04:00:00  영등포구         0.0         12.0\n",
            "2045  2019-10-07 18:00:00  영등포구         0.0          8.0\n",
            "2046  2019-10-07 17:00:00  영등포구         0.0          9.0\n",
            "2052  2019-10-07 11:00:00  영등포구         0.0         12.0\n",
            "2164  2019-10-02 19:00:00  영등포구         0.0         10.0\n",
            "...                   ...   ...         ...          ...\n",
            "6278  2019-04-14 09:00:00  영등포구         0.0          0.0\n",
            "6514  2019-04-04 13:00:00  영등포구         0.0         38.0\n",
            "6515  2019-04-04 12:00:00  영등포구         0.0         26.0\n",
            "6516  2019-04-04 11:00:00  영등포구         0.0         36.0\n",
            "6772  2019-03-24 19:00:00  영등포구         0.0          0.0\n",
            "\n",
            "[65 rows x 4 columns]\n",
            "ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n",
            "강서구 는\n",
            "일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "dtype: int64\n",
            "                       일시   구분  미세먼지(PM10)  초미세먼지(PM25)\n",
            "422   2019-12-14 09:00:00  강서구         0.0          0.0\n",
            "423   2019-12-14 08:00:00  강서구         0.0          0.0\n",
            "424   2019-12-14 07:00:00  강서구         0.0          0.0\n",
            "425   2019-12-14 06:00:00  강서구         0.0          0.0\n",
            "426   2019-12-14 05:00:00  강서구         0.0          0.0\n",
            "427   2019-12-14 04:00:00  강서구         0.0          0.0\n",
            "428   2019-12-14 03:00:00  강서구         0.0          0.0\n",
            "429   2019-12-14 02:00:00  강서구         0.0          0.0\n",
            "430   2019-12-14 01:00:00  강서구         0.0          0.0\n",
            "431   2019-12-14 00:00:00  강서구         0.0          0.0\n",
            "432   2019-12-13 23:00:00  강서구         0.0          0.0\n",
            "433   2019-12-13 22:00:00  강서구         0.0          0.0\n",
            "434   2019-12-13 21:00:00  강서구         0.0          0.0\n",
            "435   2019-12-13 20:00:00  강서구         0.0          0.0\n",
            "436   2019-12-13 19:00:00  강서구         0.0          0.0\n",
            "437   2019-12-13 18:00:00  강서구         0.0          0.0\n",
            "438   2019-12-13 17:00:00  강서구         0.0          0.0\n",
            "439   2019-12-13 16:00:00  강서구         0.0          0.0\n",
            "440   2019-12-13 15:00:00  강서구         0.0          0.0\n",
            "441   2019-12-13 14:00:00  강서구         0.0          0.0\n",
            "442   2019-12-13 13:00:00  강서구         0.0          0.0\n",
            "443   2019-12-13 12:00:00  강서구         0.0          0.0\n",
            "444   2019-12-13 11:00:00  강서구         0.0          0.0\n",
            "445   2019-12-13 10:00:00  강서구         0.0          0.0\n",
            "446   2019-12-13 09:00:00  강서구         0.0          0.0\n",
            "447   2019-12-13 08:00:00  강서구         0.0          0.0\n",
            "448   2019-12-13 07:00:00  강서구         0.0          0.0\n",
            "449   2019-12-13 06:00:00  강서구         0.0          0.0\n",
            "450   2019-12-13 05:00:00  강서구         0.0          0.0\n",
            "451   2019-12-13 04:00:00  강서구         0.0          0.0\n",
            "452   2019-12-13 03:00:00  강서구         0.0          0.0\n",
            "453   2019-12-13 02:00:00  강서구         0.0          0.0\n",
            "454   2019-12-13 01:00:00  강서구         0.0          0.0\n",
            "455   2019-12-13 00:00:00  강서구         0.0          0.0\n",
            "456   2019-12-12 23:00:00  강서구         0.0          0.0\n",
            "457   2019-12-12 22:00:00  강서구         0.0          0.0\n",
            "458   2019-12-12 21:00:00  강서구         0.0          0.0\n",
            "459   2019-12-12 20:00:00  강서구         0.0          0.0\n",
            "460   2019-12-12 19:00:00  강서구         0.0          0.0\n",
            "461   2019-12-12 18:00:00  강서구         0.0          0.0\n",
            "462   2019-12-12 17:00:00  강서구         0.0          0.0\n",
            "463   2019-12-12 16:00:00  강서구         0.0          0.0\n",
            "464   2019-12-12 15:00:00  강서구         0.0          0.0\n",
            "465   2019-12-12 14:00:00  강서구         0.0          0.0\n",
            "466   2019-12-12 13:00:00  강서구         0.0          0.0\n",
            "3223  2019-08-19 16:00:00  강서구         0.0         20.0\n",
            "3224  2019-08-19 15:00:00  강서구         0.0         20.0\n",
            "4711  2019-06-18 16:00:00  강서구         0.0          0.0\n",
            "ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "GcVBQMqjtTmK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 기상청 + 서울시 데이터 merge"
      ],
      "metadata": {
        "id": "Wh4MBmczqwCT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "gi = pd.read_csv('/content/drive/MyDrive/data/project02_dust/기상청 추가 자료/8방위, 강수량 이후/기상청2019_최종.csv', index_col = 0)\n",
        "gi.drop(['지점'], inplace=True, axis = 1)\n",
        "gi.drop(['지점명'], inplace=True, axis = 1)\n",
        "gi['일시'] = pd.to_datetime(gi['일시'])"
      ],
      "metadata": {
        "id": "9Ne_H2eNqMSD"
      },
      "execution_count": 64,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 16년도 17년도 컬럼명 변경 및 컬럼 순서 정렬\n",
        "gi.rename(columns = {'풍향범주(corr)' : '풍향범주_corr'}, inplace = True)\n",
        "gi = gi[['일시', '기온(°C)', '강수량(mm)', '풍향(16방위)', '풍향범주_corr', '풍향범주']]"
      ],
      "metadata": {
        "id": "B0AelecKfLoW"
      },
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "gi.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-JuCuNXooxWO",
        "outputId": "68cacb49-1ae1-4111-b699-f9f309539f87"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "일시           0\n",
              "기온(°C)       0\n",
              "강수량(mm)      0\n",
              "풍향(16방위)     0\n",
              "풍향범주_corr    0\n",
              "풍향범주         0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(len(name_abb)):\n",
        "    print('이번 차례는', name_abb[i], '입니다.')\n",
        "    df = pd.read_csv('/content/drive/MyDrive/data/project02_dust/서울시_열린데이터광장/3h_mean_done/2019/2019_{}_3h'.format(name_abb[i]))\n",
        "    df['일시'] = pd.to_datetime(df['일시'])\n",
        "    a = pd.merge(df, gi,\n",
        "                 left_on = '일시',right_on = '일시',\n",
        "                 how = 'left')\n",
        "    if a.isna().sum().sum() != 0:\n",
        "        a = a.fillna(method = 'ffill') ##################################### 재설정!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n",
        "    else:\n",
        "        pass\n",
        "    print('해당 df의 Nan값의 합은', a.isna().sum(), '입니다.')\n",
        "    print('ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ')\n",
        "    a.to_csv('/content/drive/MyDrive/data/project02_dust/최종 데이터/2019/2019_semi_final_{}_data.csv'.format(name_abb[i]))"
      ],
      "metadata": {
        "id": "vy5L8nbAt2Cy",
        "outputId": "ff625dbe-0a95-4c78-f631-7fae2067ad58",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "이번 차례는 GN 입니다.\n",
            "해당 df의 Nan값의 합은 일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "기온(°C)         0\n",
            "강수량(mm)        0\n",
            "풍향(16방위)       0\n",
            "풍향범주_corr      0\n",
            "풍향범주           0\n",
            "dtype: int64 입니다.\n",
            "ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n",
            "이번 차례는 GD 입니다.\n",
            "해당 df의 Nan값의 합은 일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "기온(°C)         0\n",
            "강수량(mm)        0\n",
            "풍향(16방위)       0\n",
            "풍향범주_corr      0\n",
            "풍향범주           0\n",
            "dtype: int64 입니다.\n",
            "ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n",
            "이번 차례는 GJ 입니다.\n",
            "해당 df의 Nan값의 합은 일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "기온(°C)         0\n",
            "강수량(mm)        0\n",
            "풍향(16방위)       0\n",
            "풍향범주_corr      0\n",
            "풍향범주           0\n",
            "dtype: int64 입니다.\n",
            "ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n",
            "이번 차례는 SP 입니다.\n",
            "해당 df의 Nan값의 합은 일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "기온(°C)         0\n",
            "강수량(mm)        0\n",
            "풍향(16방위)       0\n",
            "풍향범주_corr      0\n",
            "풍향범주           0\n",
            "dtype: int64 입니다.\n",
            "ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n",
            "이번 차례는 SD 입니다.\n",
            "해당 df의 Nan값의 합은 일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "기온(°C)         0\n",
            "강수량(mm)        0\n",
            "풍향(16방위)       0\n",
            "풍향범주_corr      0\n",
            "풍향범주           0\n",
            "dtype: int64 입니다.\n",
            "ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n",
            "이번 차례는 YS 입니다.\n",
            "해당 df의 Nan값의 합은 일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "기온(°C)         0\n",
            "강수량(mm)        0\n",
            "풍향(16방위)       0\n",
            "풍향범주_corr      0\n",
            "풍향범주           0\n",
            "dtype: int64 입니다.\n",
            "ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n",
            "이번 차례는 MP 입니다.\n",
            "해당 df의 Nan값의 합은 일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "기온(°C)         0\n",
            "강수량(mm)        0\n",
            "풍향(16방위)       0\n",
            "풍향범주_corr      0\n",
            "풍향범주           0\n",
            "dtype: int64 입니다.\n",
            "ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n",
            "이번 차례는 SCH 입니다.\n",
            "해당 df의 Nan값의 합은 일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "기온(°C)         0\n",
            "강수량(mm)        0\n",
            "풍향(16방위)       0\n",
            "풍향범주_corr      0\n",
            "풍향범주           0\n",
            "dtype: int64 입니다.\n",
            "ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n",
            "이번 차례는 DJ 입니다.\n",
            "해당 df의 Nan값의 합은 일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "기온(°C)         0\n",
            "강수량(mm)        0\n",
            "풍향(16방위)       0\n",
            "풍향범주_corr      0\n",
            "풍향범주           0\n",
            "dtype: int64 입니다.\n",
            "ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n",
            "이번 차례는 YDP 입니다.\n",
            "해당 df의 Nan값의 합은 일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "기온(°C)         0\n",
            "강수량(mm)        0\n",
            "풍향(16방위)       0\n",
            "풍향범주_corr      0\n",
            "풍향범주           0\n",
            "dtype: int64 입니다.\n",
            "ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n",
            "이번 차례는 GS 입니다.\n",
            "해당 df의 Nan값의 합은 일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "기온(°C)         0\n",
            "강수량(mm)        0\n",
            "풍향(16방위)       0\n",
            "풍향범주_corr      0\n",
            "풍향범주           0\n",
            "dtype: int64 입니다.\n",
            "ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a.isna().sum()"
      ],
      "metadata": {
        "id": "5PrqLwFiuWtR",
        "outputId": "6f8378da-dae9-45f8-867d-1849d764371e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "일시             0\n",
              "구분             0\n",
              "미세먼지(PM10)     0\n",
              "초미세먼지(PM25)    0\n",
              "기온(°C)         0\n",
              "강수량(mm)        0\n",
              "풍향(16방위)       0\n",
              "풍향범주_corr      0\n",
              "풍향범주           0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "kiWQLrkxuP4S",
        "outputId": "47040748-462d-43d8-e153-b749ad0ee728"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                      일시   구분  미세먼지(PM10)  초미세먼지(PM25)  기온(°C)  강수량(mm)  \\\n",
              "0    2019-12-31 23:00:00  강서구        29.0         17.0    -7.4      0.0   \n",
              "1    2019-12-31 22:00:00  강서구        29.0         18.0    -8.2      0.0   \n",
              "2    2019-12-31 21:00:00  강서구        35.0         18.0    -7.4      0.0   \n",
              "3    2019-12-31 20:00:00  강서구        34.0         17.0    -7.0      0.0   \n",
              "4    2019-12-31 19:00:00  강서구        28.0         16.0    -6.9      0.0   \n",
              "...                  ...  ...         ...          ...     ...      ...   \n",
              "8755 2019-01-01 04:00:00  강서구        54.0         30.0    -7.2      0.0   \n",
              "8756 2019-01-01 03:00:00  강서구        61.0         29.0    -6.9      0.0   \n",
              "8757 2019-01-01 02:00:00  강서구        55.0         31.0    -6.5      0.0   \n",
              "8758 2019-01-01 01:00:00  강서구        53.0         25.0    -5.9      0.0   \n",
              "8759 2019-01-01 00:00:00  강서구        46.0         23.0    -5.5      0.0   \n",
              "\n",
              "      풍향(16방위)  풍향범주_corr 풍향범주  \n",
              "0          0.0          1    북  \n",
              "1          0.0          1    북  \n",
              "2         20.0          2   북동  \n",
              "3        290.0          8   북서  \n",
              "4        290.0          8   북서  \n",
              "...        ...        ...  ...  \n",
              "8755     270.0          7    서  \n",
              "8756     270.0          7    서  \n",
              "8757     290.0          8   북서  \n",
              "8758     270.0          7    서  \n",
              "8759     290.0          8   북서  \n",
              "\n",
              "[8760 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-506c510b-ccf5-4ced-adf1-9a8d1be5d5c7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>일시</th>\n",
              "      <th>구분</th>\n",
              "      <th>미세먼지(PM10)</th>\n",
              "      <th>초미세먼지(PM25)</th>\n",
              "      <th>기온(°C)</th>\n",
              "      <th>강수량(mm)</th>\n",
              "      <th>풍향(16방위)</th>\n",
              "      <th>풍향범주_corr</th>\n",
              "      <th>풍향범주</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2019-12-31 23:00:00</td>\n",
              "      <td>강서구</td>\n",
              "      <td>29.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>-7.4</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>북</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2019-12-31 22:00:00</td>\n",
              "      <td>강서구</td>\n",
              "      <td>29.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>-8.2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>북</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2019-12-31 21:00:00</td>\n",
              "      <td>강서구</td>\n",
              "      <td>35.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>-7.4</td>\n",
              "      <td>0.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>2</td>\n",
              "      <td>북동</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2019-12-31 20:00:00</td>\n",
              "      <td>강서구</td>\n",
              "      <td>34.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>-7.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>290.0</td>\n",
              "      <td>8</td>\n",
              "      <td>북서</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2019-12-31 19:00:00</td>\n",
              "      <td>강서구</td>\n",
              "      <td>28.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>-6.9</td>\n",
              "      <td>0.0</td>\n",
              "      <td>290.0</td>\n",
              "      <td>8</td>\n",
              "      <td>북서</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8755</th>\n",
              "      <td>2019-01-01 04:00:00</td>\n",
              "      <td>강서구</td>\n",
              "      <td>54.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>-7.2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>270.0</td>\n",
              "      <td>7</td>\n",
              "      <td>서</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8756</th>\n",
              "      <td>2019-01-01 03:00:00</td>\n",
              "      <td>강서구</td>\n",
              "      <td>61.0</td>\n",
              "      <td>29.0</td>\n",
              "      <td>-6.9</td>\n",
              "      <td>0.0</td>\n",
              "      <td>270.0</td>\n",
              "      <td>7</td>\n",
              "      <td>서</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8757</th>\n",
              "      <td>2019-01-01 02:00:00</td>\n",
              "      <td>강서구</td>\n",
              "      <td>55.0</td>\n",
              "      <td>31.0</td>\n",
              "      <td>-6.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>290.0</td>\n",
              "      <td>8</td>\n",
              "      <td>북서</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8758</th>\n",
              "      <td>2019-01-01 01:00:00</td>\n",
              "      <td>강서구</td>\n",
              "      <td>53.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>-5.9</td>\n",
              "      <td>0.0</td>\n",
              "      <td>270.0</td>\n",
              "      <td>7</td>\n",
              "      <td>서</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8759</th>\n",
              "      <td>2019-01-01 00:00:00</td>\n",
              "      <td>강서구</td>\n",
              "      <td>46.0</td>\n",
              "      <td>23.0</td>\n",
              "      <td>-5.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>290.0</td>\n",
              "      <td>8</td>\n",
              "      <td>북서</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8760 rows × 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-506c510b-ccf5-4ced-adf1-9a8d1be5d5c7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-506c510b-ccf5-4ced-adf1-9a8d1be5d5c7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-506c510b-ccf5-4ced-adf1-9a8d1be5d5c7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c77aed16-990b-4e12-9415-7e4a6bcb68de\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c77aed16-990b-4e12-9415-7e4a6bcb68de')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c77aed16-990b-4e12-9415-7e4a6bcb68de button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_28f746d7-2358-4f39-9663-876f5d46ff26\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('a')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_28f746d7-2358-4f39-9663-876f5d46ff26 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('a');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "a",
              "summary": "{\n  \"name\": \"a\",\n  \"rows\": 8760,\n  \"fields\": [\n    {\n      \"column\": \"\\uc77c\\uc2dc\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-01-01 00:00:00\",\n        \"max\": \"2019-12-31 23:00:00\",\n        \"num_unique_values\": 8760,\n        \"samples\": [\n          \"2019-04-23 15:00:00\",\n          \"2019-05-14 11:00:00\",\n          \"2019-04-26 09:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\uad6c\\ubd84\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"\\uac15\\uc11c\\uad6c\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\ubbf8\\uc138\\uba3c\\uc9c0(PM10)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35.1680305510224,\n        \"min\": 3.0,\n        \"max\": 283.0,\n        \"num_unique_values\": 238,\n        \"samples\": [\n          180.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\ucd08\\ubbf8\\uc138\\uba3c\\uc9c0(PM25)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20.962369779949114,\n        \"min\": 1.0,\n        \"max\": 175.0,\n        \"num_unique_values\": 159,\n        \"samples\": [\n          96.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\uae30\\uc628(\\u00b0C)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.633410643305108,\n        \"min\": -10.8,\n        \"max\": 36.7,\n        \"num_unique_values\": 462,\n        \"samples\": [\n          13.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\uac15\\uc218\\ub7c9(mm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8091258611918033,\n        \"min\": 0.0,\n        \"max\": 20.4,\n        \"num_unique_values\": 81,\n        \"samples\": [\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\ud48d\\ud5a5(16\\ubc29\\uc704)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 112.7224205544267,\n        \"min\": 0.0,\n        \"max\": 360.0,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\ud48d\\ud5a5\\ubc94\\uc8fc_corr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 8,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\ud48d\\ud5a5\\ubc94\\uc8fc\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"\\ubd81\\ub3d9\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "ujdf_7UMDBPi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 지역별 16 ~ 19년도 합치기"
      ],
      "metadata": {
        "id": "8BYgy32x3Y_L"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(len(name_abb)):\n",
        "    df1 = pd.read_csv('/content/drive/MyDrive/data/project02_dust/최종 데이터/2016/2016_semi_final_{}_data.csv'.format(name_abb[i]), index_col = 0)\n",
        "    df2 = pd.read_csv('/content/drive/MyDrive/data/project02_dust/최종 데이터/2017/2017_semi_final_{}_data.csv'.format(name_abb[i]), index_col = 0)\n",
        "    df3 = pd.read_csv('/content/drive/MyDrive/data/project02_dust/최종 데이터/2018/2018_semi_final_{}_data.csv'.format(name_abb[i]), index_col = 0)\n",
        "    df4 = pd.read_csv('/content/drive/MyDrive/data/project02_dust/최종 데이터/2019/2019_semi_final_{}_data.csv'.format(name_abb[i]), index_col = 0)\n",
        "\n",
        "\n",
        "    total = total = pd.concat([df1, df2, df3, df4], axis = 0)\n",
        "    total = total.sort_values(by = '일시').reset_index(drop = True)\n",
        "    a = total.isna().sum()\n",
        "    b = name_abb[i]\n",
        "    print(f\"{b}의 fillna 값은 {a} 입니다.\")\n",
        "    total.to_csv('/content/drive/MyDrive/data/project02_dust/최종 데이터/기상청_서울시_구별_연도별_concat_후/total_{}.csv'.format(name_abb[i]))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QbAWLMVJvuRk",
        "outputId": "c20f601d-8761-474a-d8e8-bd2f593a1bbb"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "GN의 fillna 값은 일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "기온(°C)         0\n",
            "강수량(mm)        0\n",
            "풍향(16방위)       0\n",
            "풍향범주_corr      0\n",
            "풍향범주           0\n",
            "dtype: int64 입니다.\n",
            "GD의 fillna 값은 일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "기온(°C)         0\n",
            "강수량(mm)        0\n",
            "풍향(16방위)       0\n",
            "풍향범주_corr      0\n",
            "풍향범주           0\n",
            "dtype: int64 입니다.\n",
            "GJ의 fillna 값은 일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "기온(°C)         0\n",
            "강수량(mm)        0\n",
            "풍향(16방위)       0\n",
            "풍향범주_corr      0\n",
            "풍향범주           0\n",
            "dtype: int64 입니다.\n",
            "SP의 fillna 값은 일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "기온(°C)         0\n",
            "강수량(mm)        0\n",
            "풍향(16방위)       0\n",
            "풍향범주_corr      0\n",
            "풍향범주           0\n",
            "dtype: int64 입니다.\n",
            "SD의 fillna 값은 일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "기온(°C)         0\n",
            "강수량(mm)        0\n",
            "풍향(16방위)       0\n",
            "풍향범주_corr      0\n",
            "풍향범주           0\n",
            "dtype: int64 입니다.\n",
            "YS의 fillna 값은 일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "기온(°C)         0\n",
            "강수량(mm)        0\n",
            "풍향(16방위)       0\n",
            "풍향범주_corr      0\n",
            "풍향범주           0\n",
            "dtype: int64 입니다.\n",
            "MP의 fillna 값은 일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "기온(°C)         0\n",
            "강수량(mm)        0\n",
            "풍향(16방위)       0\n",
            "풍향범주_corr      0\n",
            "풍향범주           0\n",
            "dtype: int64 입니다.\n",
            "SCH의 fillna 값은 일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "기온(°C)         0\n",
            "강수량(mm)        0\n",
            "풍향(16방위)       0\n",
            "풍향범주_corr      0\n",
            "풍향범주           0\n",
            "dtype: int64 입니다.\n",
            "DJ의 fillna 값은 일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "기온(°C)         0\n",
            "강수량(mm)        0\n",
            "풍향(16방위)       0\n",
            "풍향범주_corr      0\n",
            "풍향범주           0\n",
            "dtype: int64 입니다.\n",
            "YDP의 fillna 값은 일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "기온(°C)         0\n",
            "강수량(mm)        0\n",
            "풍향(16방위)       0\n",
            "풍향범주_corr      0\n",
            "풍향범주           0\n",
            "dtype: int64 입니다.\n",
            "GS의 fillna 값은 일시             0\n",
            "구분             0\n",
            "미세먼지(PM10)     0\n",
            "초미세먼지(PM25)    0\n",
            "기온(°C)         0\n",
            "강수량(mm)        0\n",
            "풍향(16방위)       0\n",
            "풍향범주_corr      0\n",
            "풍향범주           0\n",
            "dtype: int64 입니다.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## Nan 값 확인\n",
        "for i in range(len(name_abb)):\n",
        "    want = pd.read_csv('/content/drive/MyDrive/data/project02_dust/최종 데이터/기상청_서울시_구별_연도별_concat_후/total_{}.csv'.format(name_abb[i]), index_col=0)\n",
        "    print(\"ㅡㅡㅡ 구분선 ㅡㅡㅡ\")\n",
        "    print(Gu[i] + \"의 결과는 아래와 같습니다. \")\n",
        "    print(want.isnull().sum())"
      ],
      "metadata": {
        "id": "g5LMKIGcIg9g"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}